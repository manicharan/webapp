name: BuildTest

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build:
    name: Build Packer
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        continue-on-error: false

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
          cache: maven
        continue-on-error: false

      - name: Set up MariaDB
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y mariadb-server mariadb-client
        continue-on-error: false

      - name: Start and check MariaDB
        run: |
          sudo systemctl start mariadb
          sudo systemctl enable mariadb
          sudo systemctl status mariadb
        continue-on-error: false

      - name: Create User and Grant Access
        run: |
          sudo mysql -e "CREATE USER '${{ secrets.MARIADBUSERNAME}}'@'${{ secrets.MARIADBHOST}}' IDENTIFIED BY '${{ secrets.MARIADBPASSWORD}}';"
          sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO '${{ secrets.MARIADBUSERNAME}}'@'${{ secrets.MARIADBHOST}}' WITH GRANT OPTION;"
          sudo mysql -e "FLUSH PRIVILEGES;"
        continue-on-error: false

      - name: Build and Test
        env:
          DBHost: ${{ secrets.MARIADBHOST}}
          DBPort: ${{ secrets.MARIADBPORT}}
          DBDatabase: ${{ secrets.MARIADBDATABASE}}
          DBUser: ${{ secrets.MARIADBUSERNAME}}
          DBPassword: ${{ secrets.MARIADBPASSWORD}}
          AvailabilityZone: randomZone
          snsTopicArn: randomARN
          awsRegion: randomRegion
        run: |
          mvn clean install
          pwd
          ls -al
          chmod +x ./mvnw
          ./mvnw clean install
          ./mvnw test
        continue-on-error: false

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        id: setup
        continue-on-error: false

      - name: Initialize packer
        run: packer init ./packer/.
        continue-on-error: false

      - name: Set up Dev AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_AccessKey }}
          aws-secret-access-key: ${{ secrets.AWS_SecretAccessKey }}
          aws-region: us-east-1
        continue-on-error: false

      - name: Packer Build
        run: |
          export PKR_VAR_source_ami=${{ secrets.AMI}}
          packer build ./packer/debian-ami.pkr.hcl
        continue-on-error: false

      - name: Set up Demo AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_AccessKey_Demo }}
          aws-secret-access-key: ${{ secrets.AWS_SecretAccessKey_Demo }}
          aws-region: us-east-1
        continue-on-error: false
#
#      - name: Create a new Launch Template with new AMI ID
#        run: |
#          latest_ami_id=$(aws ec2 describe-images --owners ${{ secrets.Demo_Account_Id }} --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
#        aws ec2 create-launch-template-version
      - name: Update Launch template and instantiate instance refresh
        run: |
          image_id=$(aws ec2 describe-images --owners ${{ vars.DEV_ACCOUNT_ID }} --filters "Name=name,Values=csye6225_2023_*" --query 'sort_by(Images, &CreationDate)[-1].ImageId')
          echo "Image ID: $image_id"
          launch_template_response=$(aws ec2 create-launch-template-version --launch-template-id ${{vars.LAUNCH_TEMPLATE_ID}} --source-version ${{vars.LAUNCH_TEMPLATE_VERSION}} --launch-template-data "{\"ImageId\":$image_id}")
          version_number=$(echo $launch_template_response | jq -r '.LaunchTemplateVersion.VersionNumber')
          echo "Launch Template Version: $version_number"
          aws ec2 modify-launch-template --launch-template-id ${{vars.LAUNCH_TEMPLATE_ID}} --default-version $version_number --region ${{secrets.AWS_REGION}}     
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{vars.AUTO_SCALING_GROUP_NAME}} --preferences "{\"InstanceWarmup\":180,\"MinHealthyPercentage\":100}" --strategy Rolling
          sleep 20

      - name: Wait for instance refresh to complete
        run: |
          instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{vars.AUTO_SCALING_GROUP_NAME}} --region ${{secrets.AWS_REGION}} --query 'InstanceRefreshes[?StartTime!=null] | sort_by(@, &StartTime)[-1].Status' --output text)
          while [ "$instance_refresh_status" != "Successful" ]
          do
            echo "Instance refresh status: $instance_refresh_status"
            sleep 10
            instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{vars.AUTO_SCALING_GROUP_NAME}} --region ${{secrets.AWS_REGION}} --query 'InstanceRefreshes[?StartTime!=null] | sort_by(@, &StartTime)[-1].Status' --output text)
            if [ "$instance_refresh_status" == "Failed" || "$instance_refresh_status" == "Cancelled" ]
            then
              echo "Instance refresh failed or cancelled"
              exit 1
            fi
          done
          echo "Instance refresh status: $instance_refresh_status"
          echo "Instance refresh completed successfully"